/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcc.apresentacao;

import java.awt.Color;
import java.awt.Font;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tcc.dominio.FormaPagamento;
import tcc.dominio.ContasAPagar;
import tcc.negocio.ContasAPagarController;

/**
 *
 * @author Breno-
 */
public class TabelaContasPagar extends javax.swing.JInternalFrame {

     String[] colunas = {"Cod." ,"Data Vencimento", "Empresa", "Valor", "Forma de pagamento", "Conta Bancaria", "idFormaPagamento", "SITUAÇÃO"};
    
     ContasAPagarController pagarContasController = new ContasAPagarController();
    
    public TabelaContasPagar() {
        initComponents();
       listarContasapagar();
       somaContasReceber();
       TabelaContas.setDefaultEditor(Object.class, null);
       totalpagar.setFont((new Font("Times New Roman", Font.BOLD, 14)));
       totalpagar.setForeground(Color.red);
       totalpago.setFont((new Font("Times New Roman", Font.BOLD, 14)));
       totalpago.setForeground(Color.BLUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabelaContas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        totalpago = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        totalpagar = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Lorem Auctor - Tabela de Contas");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        TabelaContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TabelaContas.setRowHeight(35);
        jScrollPane2.setViewportView(TabelaContas);

        jButton1.setText("Conta Paga");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Em Aberto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Remover Conta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Contas a Pagar:");

        totalpago.setText("0.0");

        jLabel2.setText("Total Pago:");

        totalpagar.setText("0.0");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/10.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/15.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/1.png"))); // NOI18N
        jButton16.setToolTipText("Atualizar Informações da Tabela");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(89, 89, 89)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalpagar)
                            .addComponent(totalpago)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(totalpagar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(totalpago))))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
                ContasAPagar pc = new ContasAPagar();
        int linhaselecionada = TabelaContas.getSelectedRow();
        
        int idConta = (int) TabelaContas.getValueAt(linhaselecionada, 0);
            pc.setIdConta(idConta);

        int id = (int) TabelaContas.getValueAt(linhaselecionada, 0);
        String dataVencimento = (String) TabelaContas.getValueAt(linhaselecionada, 1);
        String Empresa = (String) TabelaContas.getValueAt(linhaselecionada, 2).toString();
        double Valor = (Double) TabelaContas.getValueAt(linhaselecionada, 3);
        String formaPagamento = (String) TabelaContas.getValueAt(linhaselecionada, 4).toString();
        String contaBancaria = (String) TabelaContas.getValueAt(linhaselecionada, 5);
        String situacao = (String) TabelaContas.getValueAt(linhaselecionada, 7);
            
            
        int result =   JOptionPane.showConfirmDialog(null, "TEM CERTEZA QUE DESEJA REMOVER ESSA CONTA? \n \n" + " Id: " + id + "\n Data de Vencimento: " + dataVencimento + "\n Empresa: " + Empresa + "\n Valor: " + Valor + "\n Forma de Pagemento: " + formaPagamento + "\n Conta Usada p/ Pagamento: " + contaBancaria + "\n Situação da Conta:" + situacao);
        if(result == JOptionPane.OK_OPTION){
        try {
             pagarContasController.ApagarContas(pc);
             listarContasapagar();
             somaContasReceber();
        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "Não foi possível apagar a conta. Tente Novamente");
         }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        CadastroContaAPagar cca = new CadastroContaAPagar();
        TelaPrincipal.Addtelaprincipal(cca);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int linhaselecionada = TabelaContas.getSelectedRow();
        int contadorlinhas = TabelaContas.getSelectedRowCount();
        String aviso2 = "EM ABERTO";

        int id = (int) TabelaContas.getValueAt(linhaselecionada, 0);
        String dataVencimento = (String) TabelaContas.getValueAt(linhaselecionada, 1);
        String Empresa = (String) TabelaContas.getValueAt(linhaselecionada, 2).toString();
        BigDecimal valor = (BigDecimal)(TabelaContas.getValueAt(linhaselecionada, 3));
        String formaPagamento = (String) TabelaContas.getValueAt(linhaselecionada, 4).toString();
        String contaBancaria = (String) TabelaContas.getValueAt(linhaselecionada, 5);
        int idFormaPagamento = Integer.parseInt(TabelaContas.getValueAt(linhaselecionada, 6).toString());
        String situacao = (String) TabelaContas.getValueAt(linhaselecionada, 7);

        FormaPagamento formaPagamentox = (FormaPagamento) TabelaContas.getValueAt(linhaselecionada, 4);

        if(contadorlinhas > 1){
            JOptionPane.showMessageDialog(null, "Selecione Apenas 1 linha!");
            return;
        }

        if(contadorlinhas == 0){
            JOptionPane.showMessageDialog(null, "Selecione 1 linha!");
            return;
        }

        ContasAPagar pc = new ContasAPagar();
        FormaPagamento fp = new FormaPagamento();
        fp.setIdFormaPagamento(idFormaPagamento);
        fp.setFormaPagamento(formaPagamento);

        pc.setIdConta(id);
        pc.setEmpresa(Empresa);
        pc.setValor(valor);
        pc.setDataVencimento(dataVencimento);
        pc.setFormaPagamento(formaPagamentox);
        pc.setContabancaria(contaBancaria);
        pc.setSituacaoConta(aviso2);

        int result =   JOptionPane.showConfirmDialog(null, "TEM CERTEZA QUE ESTE BOLETO ESTÁ EM ABERTO? \n \n" + " Id: " + id + "\n Data de Vencimento: " + dataVencimento + "\n Empresa: " + Empresa + "\n Valor: " + valor + "\n Forma de Pagemento: " + formaPagamento + "\n Conta Usada p/ Pagamento: " + contaBancaria + "\n Situação da Conta: " + situacao);
        if(result == JOptionPane.OK_OPTION){
            try {
                pagarContasController.AtualizarContas(pc);
                JOptionPane.showMessageDialog(null, "SALVO!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                listarContasapagar();
                somaContasReceber();
            }   catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Não foi possível Salvar. Tente Novamente.");

            }

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int linhaselecionada = TabelaContas.getSelectedRow();
        int contadorlinhas = TabelaContas.getSelectedRowCount();
        String aviso = "CONTA PAGA";

        int id = (int) TabelaContas.getValueAt(linhaselecionada, 0);
        String dataVencimento = (String) TabelaContas.getValueAt(linhaselecionada, 1);
        String Empresa = (String) TabelaContas.getValueAt(linhaselecionada, 2).toString();
        BigDecimal valor = (BigDecimal)(TabelaContas.getValueAt(linhaselecionada, 3));
        String formaPagamento = (String) TabelaContas.getValueAt(linhaselecionada, 4).toString();
        String contaBancaria = (String) TabelaContas.getValueAt(linhaselecionada, 5);
        int idFormaPagamento = Integer.parseInt(TabelaContas.getValueAt(linhaselecionada, 6).toString());
        String situacao = (String) TabelaContas.getValueAt(linhaselecionada, 7);


        if(contadorlinhas > 1){
            JOptionPane.showMessageDialog(null, "Selecione Apenas 1 linha!");
            return;
        }

        if(contadorlinhas == 0){
            JOptionPane.showMessageDialog(null, "Selecione 1 linha!");
            return;
        }
        FormaPagamento formaPagamentox = (FormaPagamento) TabelaContas.getValueAt(linhaselecionada, 4);
        ContasAPagar pc = new ContasAPagar();
        
        FormaPagamento fp = new FormaPagamento();
        fp.setIdFormaPagamento(idFormaPagamento);
        fp.setFormaPagamento(formaPagamento);

        pc.setIdConta(id);
        pc.setEmpresa(Empresa);
        pc.setValor(valor);
        pc.setDataVencimento(dataVencimento);
        pc.setFormaPagamento(formaPagamentox);
        pc.setContabancaria(contaBancaria);
        pc.setSituacaoConta(aviso);

        int result =   JOptionPane.showConfirmDialog(null, "TEM CERTEZA QUE ESTE BOLETO FOI PAGO? \n \n" + " Id: " + id + "\n Data de Vencimento: " + dataVencimento + "\n Empresa: " + Empresa + "\n Valor: " + valor + "\n Forma de Pagemento: " + formaPagamento + "\n Conta Usada p/ Pagamento: " + contaBancaria + "\n Situação da Conta: " + situacao);
        if(result == JOptionPane.OK_OPTION){
            try {
                pagarContasController.AtualizarContas(pc);
                JOptionPane.showMessageDialog(null, "SALVO!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                listarContasapagar();
                somaContasReceber();

            }   catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Não foi possível Salvar. Tente Novamente.");

            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ContasAPagar pc = new ContasAPagar();
        int linhaselecionada = TabelaContas.getSelectedRow();

        int id_conta = (int) TabelaContas.getValueAt(linhaselecionada, 0);
        pc.setIdConta(id_conta);

        int id = (int) TabelaContas.getValueAt(linhaselecionada, 0);
        String dataVencimento = (String) TabelaContas.getValueAt(linhaselecionada, 1);
        String Empresa = (String) TabelaContas.getValueAt(linhaselecionada, 2).toString();
        double Valor = (Double) TabelaContas.getValueAt(linhaselecionada, 3);
        String formaPagamento = (String) TabelaContas.getValueAt(linhaselecionada, 4).toString();
        String contaBancaria = (String) TabelaContas.getValueAt(linhaselecionada, 5);
        String situacao = (String) TabelaContas.getValueAt(linhaselecionada, 7);

        int result =   JOptionPane.showConfirmDialog(null, "TEM CERTEZA QUE DESEJA REMOVER ESSA CONTA? \n \n" + " Id: " + id + "\n Data de Vencimento: " + dataVencimento + "\n Empresa: " + Empresa + "\n Valor: " + Valor + "\n Forma de Pagemento: " + formaPagamento + "\n Conta Usada p/ Pagamento: " + contaBancaria + "\n Situação da Conta:" + situacao);
        if(result == JOptionPane.OK_OPTION){
            try {
                pagarContasController.ApagarContas(pc);
                listarContasapagar();
                somaContasReceber();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Não foi possível apagar a conta. Tente Novamente");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        listarContasapagar();
    }//GEN-LAST:event_jButton16ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaContas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel totalpagar;
    private javax.swing.JLabel totalpago;
    // End of variables declaration//GEN-END:variables

        private void listarContasapagar() {
           
        try {
            
            List<ContasAPagar> pagar_contas = pagarContasController.listarContasapagar();
            DefaultTableModel model = new DefaultTableModel(colunas, 0);
            for (ContasAPagar y : pagar_contas) {
                model.addRow(new Object[] {
                    y.getIdConta(),
                    y.getDataVencimento(),
                    y.getEmpresa(),
                    y.getValor(),
                    y.getFormaPagamento(),
                    y.getContaBancaria(),
                    y.getFormaPagamento().getIdFormaPagamento(),
                    y.getSituacaoConta()
                     });
            }
           TabelaContas.setModel(model);
           
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao listar as Contas!");
        }
    }
        
         private void somaContasReceber() {
             double soma = 0F;
             double soma2 = 0F;
             NumberFormat nf = new DecimalFormat("###,##0.00");
           
        for (int i = 0 ; i < TabelaContas.getModel().getRowCount() ; i++) {
         String situacao = (String) TabelaContas.getModel().getValueAt(i, 7);
             
           
            if(situacao.equals("EM ABERTO")){
            
            BigDecimal valor = new BigDecimal(TabelaContas.getValueAt(i, 3).toString());
            soma = new BigDecimal(soma).add(valor).doubleValue();
            totalpagar.setText((nf.format(soma)).toString());;
            
            }
            
            else if(situacao.equals("CONTA PAGA")){
            
            BigDecimal valor2 = new BigDecimal(TabelaContas.getValueAt(i, 3).toString());
            soma2 = new BigDecimal(soma2).add(valor2).doubleValue();
            totalpago.setText(String.valueOf(soma2));
           
                
            }
            }
            
  }
  }


