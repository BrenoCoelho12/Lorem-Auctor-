/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcc.apresentacao;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import tcc.dao.DetalhamentoContaDao;
import tcc.dominio.ClienteFisico;
import tcc.dominio.DetalhamentoConta;
import tcc.dominio.Venda;
import tcc.negocio.DetalhamentoController;
import tcc.relatorios.RelatorioDetalhamentoConta;



/**
 *
 * @author Breno-
 */
public class DetalhamentoContaPorCliente extends javax.swing.JInternalFrame {

DetalhamentoController detalhamentocontroller = new DetalhamentoController();

String[] colunas = {"Cód.","Movimento Realizado" ,"Cliente", "Valor Compra", "Valor Pago", "Saldo Devedor", "Data", "Forma de Pagamento", "Data de Vencimento", "Situacao", "Cód.Cliente", "Cód. Venda:"};
    
    public DetalhamentoContaPorCliente() {
        initComponents();
        
        String idCliente = JOptionPane.showInputDialog("Informe o cód do cliente:", "");
        int id = Integer.parseInt(idCliente);
        if(idCliente.equals("")){
            JOptionPane.showMessageDialog(null, "Insira o cód. do cliente desejado!");
            DetalhamentoContaPorCliente dcpd = new DetalhamentoContaPorCliente();
            TelaPrincipal.Addtelaprincipal(dcpd);
            return;
        }
        
        DetalhamentoConta(id);
        
        if(jTableDetalhamento.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Não foi encontrado nenhuma informação do cliente desejado!");
            return;
        }
        
       DetalhamentoConta(id);
       somaContaCliente();
       verificarVencimentoContas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDetalhamento = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        vCompras = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        vPago = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        vPagar = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        buscarIdVenda = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        buscarData = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        removerConta = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTableDetalhamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableDetalhamento.setRowHeight(25);
        jTableDetalhamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDetalhamentoMouseClicked(evt);
            }
        });
        jTableDetalhamento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableDetalhamentoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableDetalhamento);

        jButton1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton1.setText("Imprimir Detalhamento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Total das Compras:");

        vCompras.setText("0.00");

        jLabel2.setText("Valor Pago:");

        vPago.setText("0.00");

        jLabel1.setText("Saldo Devedor:");

        vPagar.setText("0.00");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Buscar Movimentações por data:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Buscar movimentações pelo cód. da Venda:");

        buscarIdVenda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarIdVendaKeyPressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton2.setText("Pesquisar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton3.setText("Pesquisar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        buscarData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        buscarData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarDataKeyPressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jButton4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton4.setText("DIMINUIR NA CONTA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton5.setText("ACRESCENTAR NA CONTA");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jButton6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/1.png"))); // NOI18N
        jButton6.setText("Atualizar Tabela");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        removerConta.setText("REMOVER CONTA DA FICHA");
        removerConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerContaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buscarIdVenda)
                            .addComponent(buscarData, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(vCompras)
                                .addGap(31, 31, 31)
                                .addComponent(jButton1))
                            .addComponent(vPagar)
                            .addComponent(vPago))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removerConta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addGap(41, 41, 41))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton2)
                    .addComponent(buscarData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(buscarIdVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(vCompras)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vPago))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vPagar)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(removerConta, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int idx = 0; String datax = ""; String clientex = ""; double valorx = 0.00; BigDecimal valorxx = new BigDecimal(valorx);
        String observacaox = ""; double valPagox = 0.00; BigDecimal valPagoxx = new BigDecimal(valPagox); 
        double valDevedorx = 0.00; BigDecimal valDevedorxx = new BigDecimal(valDevedorx);
        int idClientex = 0; int idVendax = 0; String dataVencimentox = ""; String situacaox = "";
        
        for(int i = 0;i<jTableDetalhamento.getRowCount();i++){
        int id = (Integer)jTableDetalhamento.getValueAt(i, 0);
        String observacao = jTableDetalhamento.getValueAt(i, 1).toString();
        String Cliente = jTableDetalhamento.getValueAt(i, 2).toString();
        BigDecimal valor = new BigDecimal(jTableDetalhamento.getValueAt(i, 3).toString());
        BigDecimal valPago = new BigDecimal(vPago.getText().trim());
        BigDecimal valDevedor = new BigDecimal(vPagar.getText().trim());
        String data = jTableDetalhamento.getValueAt(i, 6).toString();
        String formaPagamento = jTableDetalhamento.getValueAt(i, 7).toString();
        String dataVencimento = jTableDetalhamento.getValueAt(i, 8).toString();
        String situacao = jTableDetalhamento.getValueAt(i, 9).toString();
        int idCliente = (Integer)jTableDetalhamento.getValueAt(i, 10);
        int idVenda = (Integer)jTableDetalhamento.getValueAt(i, 11);
        
        idx = id;
        datax = data;
        clientex = Cliente;
        valorxx = valor;
        observacaox = observacao;
        valPagoxx = valPago;
        valDevedorxx = valDevedor;
        idClientex = idCliente;
        idVendax = idVenda;
        dataVencimentox = dataVencimento;
        situacaox = situacao;
        }
        
        DetalhamentoConta dc = new DetalhamentoConta();
        Venda v = new Venda();
        ClienteFisico c = new ClienteFisico();
        
        v.setIdVenda(idVendax);
        
        c.setNome(clientex);
        c.setIdCliente(idClientex);
        
        dc.setIdDetalhamento(idx);
        dc.setData(datax);
        dc.setCliente(c);
        dc.setObservação(observacaox);
        dc.setValor(valorxx);
        dc.setValorPago(valPagoxx);
        dc.setValorCompras(valPagoxx.add(valDevedorxx));
        dc.setSituacao(situacaox);
        dc.setDatasVencimento(dataVencimentox);
        dc.setSaldoDevedor(valDevedorxx);
        v.getDetalhamentoConta().add(dc);
        
        int idClientexxx = (Integer)jTableDetalhamento.getValueAt(0, 10);
        try {
               RelatorioDetalhamentoConta.gerarRelatorio(dc, "RelatorioDetalhamento", idClientexxx);
        } catch (SQLException ex) {
             ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Não foi possível carregar o relatório. Por favor, tente novamente mais tarde!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (JRException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Não foi possível carregar o relatório. Por favor, tente novamente mais tarde!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Não foi possível carregar o relatório. Por favor, tente novamente mais tarde!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Não foi possível carregar o relatório. Por favor, tente novamente mais tarde!", "Erro", JOptionPane.ERROR_MESSAGE);
          }
           
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DetalhamentoContaPorData(buscarData.getText());
        if(jTableDetalhamento.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Não foi feita nenhuma movimentação na data informada!");
            buscarData.setText("");
            return;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void buscarDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarDataKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            DetalhamentoContaPorData(buscarData.getText());
        }
        if(jTableDetalhamento.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Não foi feita nenhuma movimentação na data informada!");
            buscarData.setText("");
            return;
        }
    }//GEN-LAST:event_buscarDataKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DetalhamentoContaPorCodVenda(buscarIdVenda.getText());
        if(jTableDetalhamento.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Está venda não foi encontrada!");
            buscarIdVenda.setText("");
            return;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void buscarIdVendaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarIdVendaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            DetalhamentoContaPorCodVenda(buscarIdVenda.getText());
        
        if(jTableDetalhamento.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Está venda não foi encontrada!");
            buscarIdVenda.setText("");
            return;
        }
        }
    }//GEN-LAST:event_buscarIdVendaKeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        NumberFormat nf = new DecimalFormat("####.##");
        nf.setMinimumFractionDigits(2);
        nf.setMaximumFractionDigits(2);
        
        int linha = jTableDetalhamento.getSelectedRow();

        int id = (Integer)jTableDetalhamento.getValueAt(linha, 0);
        String observacao = jTableDetalhamento.getValueAt(linha, 1).toString();
        String Cliente = jTableDetalhamento.getValueAt(linha, 2).toString();
        BigDecimal valor = new BigDecimal(jTableDetalhamento.getValueAt(linha, 3).toString());
        BigDecimal valPago = new BigDecimal(jTableDetalhamento.getValueAt(linha, 4).toString());
        BigDecimal valDevedor = new BigDecimal(jTableDetalhamento.getValueAt(linha, 5).toString());
        String data = jTableDetalhamento.getValueAt(linha, 6).toString();
        String formaPagamento = jTableDetalhamento.getValueAt(linha, 7).toString();
        String dataVencimento = jTableDetalhamento.getValueAt(linha, 8).toString();
        String situacao = jTableDetalhamento.getValueAt(linha, 9).toString();
        int idCliente = (Integer)jTableDetalhamento.getValueAt(linha, 10);
        int idVenda = (Integer)jTableDetalhamento.getValueAt(linha, 11);
        
        String pagou = JOptionPane.showInputDialog("Informe o valor pago na parcela:");
        String pagoux = pagou.replaceAll(",", ".");
        BigDecimal valorPagoParcela = new BigDecimal(pagoux);
        
        if(valorPagoParcela.compareTo(valDevedor) > 0){
            JOptionPane.showMessageDialog(null, "O valor a ser diminuído é maior que o valor restante da conta!");
            return;
        }
        
        if(valorPagoParcela.equals("")){
            JOptionPane.showMessageDialog(null, "Insira um valor válido!");
            return;
        }
        
        double valorAtualizadoDouble = valDevedor.subtract(valorPagoParcela).doubleValue();
        BigDecimal valorAtualizado = new BigDecimal(valorAtualizadoDouble);
        
        double qtdPago = valor.subtract(valorAtualizado).doubleValue();
        BigDecimal qtdPago2 = new BigDecimal(qtdPago);
        
        Venda v = new Venda();
        ClienteFisico cf = new ClienteFisico();
        DetalhamentoConta dc = new DetalhamentoConta();
        
        v.setIdVenda(idVenda);
        cf.setIdCliente(idCliente);
        cf.setNome(Cliente);
        
        dc.setIdDetalhamento(id);
        dc.setData(data);
        dc.setValor(valor);
        dc.setCliente(cf);
        dc.setObservação(observacao);
        dc.setValorPago(qtdPago2);
        dc.setValorCompras(valPago.add(valDevedor));
        dc.setSaldoDevedor(valorAtualizado);
        dc.setVenda(v);
        dc.setSituacao(situacao);
        dc.setFormaPagamento(formaPagamento);
        dc.setDatasVencimento(dataVencimento);
        v.getDetalhamentoConta().add(dc);
        
    try {
        int confirmacao = JOptionPane.showConfirmDialog(null, "Tem certeza que foi pago "+ pagou +"reais na conta abaixo?"+" \n Cliente: " + Cliente + "\n Valor da Parcela: " + valor + "\n Data de vencimento: " + dataVencimento + "\n Situação Atual: " + situacao + "\n Valor Restante: " + nf.format(valorAtualizado));
        if(confirmacao == JOptionPane.OK_OPTION){
            detalhamentocontroller.AtualizarDetalhamentoNaLista(dc);
            JOptionPane.showMessageDialog(null, "Atualização salva.");
           jTableDetalhamento.setValueAt(nf.format(valorAtualizado).replaceAll(",", "."), linha, 5);
           jTableDetalhamento.setValueAt(nf.format(qtdPago2).replaceAll(",", "."), linha, 4);
           somaContaCliente();
        }
    } catch (SQLException ex) {
        Logger.getLogger(DetalhamentoContaPorCliente.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    String valorRestanteAtualizado = jTableDetalhamento.getValueAt(linha, 5).toString();
    String movimento = jTableDetalhamento.getValueAt(linha, 1).toString();
    if(valorRestanteAtualizado.equals("0.00")){
        jTableDetalhamento.setValueAt("CONTA PAGA", linha, 9);
        dc.setIdDetalhamento(id);
        dc.setData(data);
        dc.setValor(valor);
        dc.setCliente(cf);
        dc.setObservação(observacao);
        dc.setValorPago(qtdPago2);
        dc.setValorCompras(valPago.add(valDevedor));
        dc.setSaldoDevedor(valorAtualizado);
        dc.setVenda(v);
        dc.setSituacao("CONTA PAGA");
        dc.setFormaPagamento(formaPagamento);
        dc.setDatasVencimento(dataVencimento);
        v.getDetalhamentoConta().add(dc);
        
               try {
                detalhamentocontroller.AtualizarDetalhamentoNaLista(dc);
                DetalhamentoConta(idCliente);
                somaContaCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Não foi possível atualizar as informações da conta! Entre em contato com o desenvolvedor. ERRO:" + ex);
                ex.printStackTrace();
            }
     
    }
    
    if(movimento.equals("NOVA COMPRA")){
        int confirmacao = JOptionPane.showConfirmDialog(null, "TEM CERTEZA QUE ESTÁ CONTA FOI PAGA? (VERIFIQUE A SITUAÇÃO DAS PARCELAS) \n\n Cliente: " + Cliente + "\n Valor da Compra: " + valor + "\n Data de vencimento: " + dataVencimento + "\n Situação Atual: " + situacao + "\n Valor Restante: " + nf.format(valorAtualizado)+ "\n\n CÓDIGO DA VENDA: " + idVenda);
        if(confirmacao == JOptionPane.OK_OPTION){
            dc.setVenda(v);
            dc.setIdDetalhamento(id);
            try {
                detalhamentocontroller.ApagarDetalhamento(dc);
                JOptionPane.showMessageDialog(null, "A conta foi retirada da ficha do cliente.");
                DetalhamentoConta(idCliente);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao retirar a conta da ficha do cliente. Entre em contato com o desenvolvedor!");
            }
        }
    }
            
    
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
          NumberFormat nf = new DecimalFormat("####.##");
        nf.setMinimumFractionDigits(2);
        nf.setMaximumFractionDigits(2);
        
        int linha = jTableDetalhamento.getSelectedRow();

        int id = (Integer)jTableDetalhamento.getValueAt(linha, 0);
        String observacao = jTableDetalhamento.getValueAt(linha, 1).toString();
        String Cliente = jTableDetalhamento.getValueAt(linha, 2).toString();
        BigDecimal valor = new BigDecimal(jTableDetalhamento.getValueAt(linha, 3).toString());
        BigDecimal valPago = new BigDecimal(jTableDetalhamento.getValueAt(linha, 4).toString());
        BigDecimal valDevedor = new BigDecimal(jTableDetalhamento.getValueAt(linha, 5).toString());
        String data = jTableDetalhamento.getValueAt(linha, 6).toString();
        String formaPagamento = jTableDetalhamento.getValueAt(linha, 7).toString();
        String dataVencimento = jTableDetalhamento.getValueAt(linha, 8).toString();
        String situacao = jTableDetalhamento.getValueAt(linha, 9).toString();
        int idCliente = (Integer)jTableDetalhamento.getValueAt(linha, 10);
        int idVenda = (Integer)jTableDetalhamento.getValueAt(linha, 11);
        
        String pagou = JOptionPane.showInputDialog("Informe o valor a ser acrescentado na parcela:");
        String pagoux = pagou.replaceAll(",", ".");
        
        BigDecimal valorPagoParcela = new BigDecimal(pagoux);
        
        double qtdPago = valPago.subtract(valorPagoParcela).doubleValue();
        BigDecimal qtdPago2 = new BigDecimal(qtdPago);
        
        double valorAtualizadoDouble = valDevedor.add(valorPagoParcela).doubleValue();
        BigDecimal valorAtualizado = new BigDecimal(valorAtualizadoDouble);
        
        if(valorPagoParcela.equals("")){
            JOptionPane.showMessageDialog(null, "Insira um valor válido!");
            return;
        }
        
        if(valorPagoParcela.compareTo(valPago) > 0){
            JOptionPane.showMessageDialog(null, "O valor a ser acrescentado na conta é maior que o valor pago!");
            return;
        }
        
        System.out.println(valor);
        System.out.println(qtdPago2);
        System.out.println(valorAtualizado);
        Venda v = new Venda();
        ClienteFisico cf = new ClienteFisico();
        DetalhamentoConta dc = new DetalhamentoConta();
        
        v.setIdVenda(idVenda);
        cf.setIdCliente(idCliente);
        cf.setNome(Cliente);
        
        dc.setIdDetalhamento(id);
        dc.setData(data);
        dc.setValor(valor);
        dc.setCliente(cf);
        dc.setObservação(observacao);
        dc.setValorPago(qtdPago2);
        dc.setValorCompras(valPago.add(valDevedor));
        dc.setSaldoDevedor(valorAtualizado);
        dc.setVenda(v);
        dc.setSituacao("EM ABERTO");
        dc.setFormaPagamento(formaPagamento);
        dc.setDatasVencimento(dataVencimento);
        v.getDetalhamentoConta().add(dc);
        

    try {
        int confirmacao = JOptionPane.showConfirmDialog(null, "Tem certeza quer aumentar "+ pagou +"reais na conta abaixo?"+" \n Cliente: " + Cliente + "\n Valor da Parcela: " + valor + "\n Data de vencimento: " + dataVencimento + "\n Situação Atual: " + situacao + "\n Valor Restante: " + nf.format(valorAtualizado));
        if(confirmacao == JOptionPane.OK_OPTION){
            detalhamentocontroller.AtualizarDetalhamentoNaLista(dc);
            JOptionPane.showMessageDialog(null, "Atualização salva.");
           jTableDetalhamento.setValueAt(nf.format(valorAtualizado).replaceAll(",", "."), linha, 5);
           jTableDetalhamento.setValueAt(nf.format(qtdPago2).replaceAll(",", "."), linha, 4);
           somaContaCliente();
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Não foi possível atualizar as informações da conta! Entre em contato com o desenvolvedor. ERRO:" + ex);
    }
    
    
        dc.setIdDetalhamento(id);
        dc.setData(data);
        dc.setValor(valor);
        dc.setCliente(cf);
        dc.setObservação(observacao);
        dc.setValorPago(qtdPago2);
        dc.setValorCompras(valPago.add(valDevedor));
        dc.setSaldoDevedor(valorAtualizado);
        dc.setVenda(v);
        dc.setSituacao("EM ABERTO");
        dc.setFormaPagamento(formaPagamento);
        dc.setDatasVencimento(dataVencimento);
        v.getDetalhamentoConta().add(dc);
        
    try {
        detalhamentocontroller.AtualizarDetalhamentoNaLista(dc);
         DetalhamentoConta(idCliente);
         somaContaCliente();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Não foi possível atualizar as informações da conta! Entre em contato com o desenvolvedor. ERRO:" + ex);
                ex.printStackTrace();
    }
    
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int idClientex = 0;
        for(int i = 0;i<jTableDetalhamento.getRowCount();i++){
        int idCliente = (Integer)jTableDetalhamento.getValueAt(i, 10);
        idClientex = idCliente;
        }
        DetalhamentoConta(idClientex);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void removerContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerContaActionPerformed
        int linha = jTableDetalhamento.getSelectedRow();
        
        int idVenda = (Integer)jTableDetalhamento.getValueAt(linha, 11);
        int idCliente = (Integer)jTableDetalhamento.getValueAt(linha, 10);
        int id = (Integer)jTableDetalhamento.getValueAt(linha, 0);
        String situacao = jTableDetalhamento.getValueAt(linha, 9).toString();
        String Cliente = jTableDetalhamento.getValueAt(linha, 2).toString();
        String dataVencimento = jTableDetalhamento.getValueAt(linha, 8).toString();
        BigDecimal valor = new BigDecimal(jTableDetalhamento.getValueAt(linha, 3).toString());
        if(situacao.equals("CONTA PAGA")){
        
        DetalhamentoConta dc = new DetalhamentoConta();
        Venda v = new Venda();
        
        v.setIdVenda(idVenda);
        
        dc.setIdDetalhamento(id);
        dc.setVenda(v);
    try {
        int confirmacao = JOptionPane.showConfirmDialog(null, "TEM CERTEZA QUE ESTÁ CONTA FOI PAGA? (VERIFIQUE A SITUAÇÃO DAS PARCELAS) \n\n Cliente: " + Cliente + "\n Valor da Compra: " + valor + "\n Data de vencimento: " + dataVencimento + "\n Situação Atual: " + situacao + "\n\n CÓDIGO DA VENDA: " + idVenda);
        if(confirmacao == JOptionPane.OK_OPTION){
        detalhamentocontroller.ApagarDetalhamento(dc);
        JOptionPane.showMessageDialog(null, "Conta retirada com sucesso!");
        DetalhamentoConta(idCliente);
    }} catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Erro ao retirar a conta da ficha do cliente. Entre em contato com o desenvolvedor!");
        ex.printStackTrace();
    }
    }
        else{
            JOptionPane.showMessageDialog(null, "A VENDA AINDA NÃO FOI TOTALMENTE PAGA! NÃO É POSSÍVEL REMOVÊ-LA.");
        }
    
    }//GEN-LAST:event_removerContaActionPerformed

    private void jTableDetalhamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDetalhamentoMouseClicked
        int linha = jTableDetalhamento.getSelectedRow();
        
        String movimento = jTableDetalhamento.getValueAt(linha, 1).toString();
        if(movimento.equals("NOVA COMPRA")){
            removerConta.setEnabled(true);
        }
        else {
            removerConta.setEnabled(false);
        }
    }//GEN-LAST:event_jTableDetalhamentoMouseClicked

    private void jTableDetalhamentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableDetalhamentoKeyPressed
         int linha = jTableDetalhamento.getSelectedRow();
        
        String movimento = jTableDetalhamento.getValueAt(linha, 1).toString();
        if(movimento.equals("NOVA COMPRA")){
            removerConta.setEnabled(true);
        }
        else {
            removerConta.setEnabled(false);
        }
    }//GEN-LAST:event_jTableDetalhamentoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField buscarData;
    private javax.swing.JTextField buscarIdVenda;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDetalhamento;
    private javax.swing.JButton removerConta;
    private javax.swing.JLabel vCompras;
    private javax.swing.JLabel vPagar;
    private javax.swing.JLabel vPago;
    // End of variables declaration//GEN-END:variables
    
    
    private void DetalhamentoConta(int idCliente) {
        try {
            DetalhamentoContaDao ddao = new DetalhamentoContaDao();
            List<DetalhamentoConta> listaDetalhamento = ddao.buscarDetalhamentoDasContas(idCliente);
            DefaultTableModel model = new DefaultTableModel(colunas, 0);
            for (DetalhamentoConta y : listaDetalhamento) {
                model.addRow(new Object[] {
                    y.getIdDetalhamento(),
                    y.getObservação(),
                    y.getCliente().getNome(),
                    y.getValor(),
                    y.getValorPago(),
                    y.getSaldoDevedor(),
                    y.getData(),
                    y.getFormaPagamento(),
                    y.getDatasVencimento(),
                    y.getSituacao(),
                    y.getCliente().getIdCliente(),
                    y.getVenda().getIdVenda()
                
                });
            }
           jTableDetalhamento.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao listar os Produtos!");
        }
         jTableDetalhamento.getColumnModel().getColumn(0).setPreferredWidth(5);
         jTableDetalhamento.getColumnModel().getColumn(1).setPreferredWidth(40);        
         jTableDetalhamento.getColumnModel().getColumn(2).setPreferredWidth(150);
         jTableDetalhamento.getColumnModel().getColumn(3).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(4).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(5).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(6).setPreferredWidth(60);
         jTableDetalhamento.getColumnModel().getColumn(7).setPreferredWidth(75);
         jTableDetalhamento.getColumnModel().getColumn(8).setPreferredWidth(75);
         jTableDetalhamento.getColumnModel().getColumn(9).setPreferredWidth(30);
         jTableDetalhamento.getColumnModel().getColumn(10).setPreferredWidth(5);
         jTableDetalhamento.getColumnModel().getColumn(11).setPreferredWidth(5);
         jTableDetalhamento.setDefaultEditor(Object.class, null);
         verificarVencimentoContas();
    }
    
    private void DetalhamentoContaPorData(String pesquisar) {
        try {
            DetalhamentoContaDao ddao = new DetalhamentoContaDao();
            List<DetalhamentoConta> listaDetalhamento = ddao.buscarDetalhamentoDasContasPorData(pesquisar);
            DefaultTableModel model = new DefaultTableModel(colunas, 0);
            for (DetalhamentoConta y : listaDetalhamento) {
                model.addRow(new Object[] {
                    y.getIdDetalhamento(),
                    y.getObservação(),
                    y.getCliente().getNome(),
                    y.getValor(),
                    y.getValorPago(),
                    y.getSaldoDevedor(),
                    y.getData(),
                    y.getFormaPagamento(),
                    y.getDatasVencimento(),
                    y.getSituacao(),
                    y.getCliente().getIdCliente(),
                    y.getVenda().getIdVenda()
                });
            }
           jTableDetalhamento.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao listar os Produtos!");
        }
    jTableDetalhamento.getColumnModel().getColumn(0).setPreferredWidth(5);
         jTableDetalhamento.getColumnModel().getColumn(1).setPreferredWidth(40);        
         jTableDetalhamento.getColumnModel().getColumn(2).setPreferredWidth(150);
         jTableDetalhamento.getColumnModel().getColumn(3).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(4).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(5).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(6).setPreferredWidth(60);
         jTableDetalhamento.getColumnModel().getColumn(7).setPreferredWidth(75);
         jTableDetalhamento.getColumnModel().getColumn(8).setPreferredWidth(75);
         jTableDetalhamento.getColumnModel().getColumn(9).setPreferredWidth(30);
         jTableDetalhamento.getColumnModel().getColumn(10).setPreferredWidth(5);
         jTableDetalhamento.getColumnModel().getColumn(11).setPreferredWidth(5);
         jTableDetalhamento.setDefaultEditor(Object.class, null);
    }
    
    private void DetalhamentoContaPorCodVenda(String pesquisar) {
        try {
            DetalhamentoContaDao ddao = new DetalhamentoContaDao();
            List<DetalhamentoConta> listaDetalhamento = ddao.buscarDetalhamentoDasContasPeloCodVenda(pesquisar);
            DefaultTableModel model = new DefaultTableModel(colunas, 0);
            for (DetalhamentoConta y : listaDetalhamento) {
                model.addRow(new Object[] {
                    y.getIdDetalhamento(),
                    y.getObservação(),
                    y.getCliente().getNome(),
                    y.getValor(),
                    y.getValorPago(),
                    y.getSaldoDevedor(),
                    y.getData(),
                    y.getFormaPagamento(),
                    y.getDatasVencimento(),
                    y.getSituacao(),
                    y.getCliente().getIdCliente(),
                    y.getVenda().getIdVenda()
                
                });
            }
           jTableDetalhamento.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao listar os Produtos!");
        }
         jTableDetalhamento.getColumnModel().getColumn(0).setPreferredWidth(5);
         jTableDetalhamento.getColumnModel().getColumn(1).setPreferredWidth(40);        
         jTableDetalhamento.getColumnModel().getColumn(2).setPreferredWidth(150);
         jTableDetalhamento.getColumnModel().getColumn(3).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(4).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(5).setPreferredWidth(10);
         jTableDetalhamento.getColumnModel().getColumn(6).setPreferredWidth(60);
         jTableDetalhamento.getColumnModel().getColumn(7).setPreferredWidth(75);
         jTableDetalhamento.getColumnModel().getColumn(8).setPreferredWidth(75);
         jTableDetalhamento.getColumnModel().getColumn(9).setPreferredWidth(30);
         jTableDetalhamento.getColumnModel().getColumn(10).setPreferredWidth(5);
         jTableDetalhamento.getColumnModel().getColumn(11).setPreferredWidth(5);
         jTableDetalhamento.setDefaultEditor(Object.class, null);
    }
    
    private void somaContaCliente(){
        double soma = 0F;
        double soma2 = 0F;
        double soma3 = 0F;
        
         NumberFormat nf = new DecimalFormat("#####0.00");
        
        for(int i = 0;i<jTableDetalhamento.getRowCount();i++){
            
            String movimento = jTableDetalhamento.getValueAt(i, 1).toString();
            
            if(movimento.equals("NOVA COMPRA")){
            BigDecimal v1 = new BigDecimal(jTableDetalhamento.getValueAt(i, 3).toString().replaceAll(",", "."));
            BigDecimal v2 = new BigDecimal(jTableDetalhamento.getValueAt(i, 4).toString().replaceAll(",", "."));
            
              soma = new BigDecimal(soma).add(v1).doubleValue();
              soma2 = new BigDecimal(soma2).add(v2).doubleValue();
              vCompras.setText(nf.format(soma).toString().replaceAll(",", "."));
              vPago.setText(nf.format(soma2).toString().replaceAll(",", "."));
            }
            soma3 = soma - soma2;
            vPagar.setText(nf.format(soma3).toString().replaceAll(",", "."));
        }
        
        vPagar.setFont((new Font("Arial", Font.BOLD, 14)));
        vPagar.setForeground(Color.RED);
        
        vPago.setFont((new Font("Arial", Font.BOLD, 14)));
        vPago.setForeground(Color.DARK_GRAY);
        
        vCompras.setFont((new Font("Arial", Font.BOLD, 14)));
        vCompras.setForeground(Color.BLUE);
    }
    
    
    public void verificarVencimentoContas (){
        for(int i = 0;i<jTableDetalhamento.getRowCount();i++){
        
        String dataVencimento = jTableDetalhamento.getValueAt(i, 8).toString();
        String movimento = jTableDetalhamento.getValueAt(i, 1).toString();
        String situacao = jTableDetalhamento.getValueAt(i, 9).toString();
        
        Calendar c = Calendar.getInstance();        
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
    try {
        if(movimento.equals("VENCIMENTO")){
        Date d = formatter.parse(dataVencimento);
        if(situacao.equals("EM ABERTO")){
        if(c.after(dataVencimento)){
            jTableDetalhamento.setValueAt("VENCIDA", i, 9);
        }
        }
        }
    } catch (ParseException ex) {
      ex.printStackTrace();
    }
    
    if(situacao.equals("EM ABERTO") || situacao.equals("VENCIDA")){
        DefaultTableCellRenderer coluna = new DefaultTableCellRenderer();
        coluna.setForeground(Color.BLUE); // fonte azul
        coluna.setBackground(Color.YELLOW); // fundo amarelo
        jTableDetalhamento.getColumnModel().getColumn(9).setCellRenderer(coluna);
    }else {
        DefaultTableCellRenderer coluna = new DefaultTableCellRenderer();
        coluna.setForeground(Color.BLUE); // fonte azul
        coluna.setBackground(Color.GRAY); // fundo cinza
        jTableDetalhamento.getColumnModel().getColumn(9).setCellRenderer(coluna);
    }
    
    }
     
    

        
    }
}
